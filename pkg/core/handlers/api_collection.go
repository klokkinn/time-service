/*
 * Time Service
 *
 * An API for registrating time
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package handlers

import (
	"errors"
	"net/http"

	"github.com/google/uuid"
	"github.com/klokkinn/time-service/pkg/core/models"

	"github.com/klokkinn/time-service/pkg/core"

	"github.com/gin-gonic/gin"
)

// AddEntry - Create a new time Entry
func AddEntry(storage core.StorageClient) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			err   error
			entry models.Entry
		)

		err = c.Bind(&entry)
		if err != nil {
			c.Status(http.StatusBadRequest)

			return
		}

		entry.Id = uuid.New().String()

		err = storage.Add(entry)
		if err != nil {
			var storageError *core.StorageError

			if errors.As(err, &storageError) {
				c.Status(storageError.StatusCode())
			} else {
				c.Status(http.StatusInternalServerError)
			}

			return
		}

		c.JSON(http.StatusCreated, entry)
	}
}

// GetAllEntries - Returns a list of time entries
func GetAllEntries(storage core.StorageClient) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			err     error
			entries []models.Entry
		)

		entries, err = storage.GetAll(core.StorageFilter{})
		if err != nil {
			var storageError *core.StorageError

			if errors.As(err, &storageError) {
				c.Status(storageError.StatusCode())
			} else {
				c.Status(http.StatusInternalServerError)
			}

			return
		}

		c.JSON(http.StatusOK, entries)
	}
}
