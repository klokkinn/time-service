/*
 * Time Service
 *
 * An API for registrating time
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package router

import (
	"fmt"
	"log"
	"net/http"

	"github.com/klokkinn/time-service/pkg/core"
	"github.com/klokkinn/time-service/pkg/storage/upper"

	"github.com/klokkinn/time-service/pkg/core/handlers"

	"github.com/gin-gonic/gin"
)

// New returns a new router.
func New(cfg core.Config) *gin.Engine {
	router := gin.Default()

	var storage core.StorageClient

	switch cfg.DSN.Scheme {
	case "postgres":
		storage = upper.NewClient(cfg.DSN)
	default:
		log.Fatal(fmt.Sprintf("time-service does not support the database backend %s", cfg.DSN.Scheme))
	}

	err := storage.Open()
	if err != nil {
		log.Fatal(err)
	}

	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFuncGenerator(storage))
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFuncGenerator(storage))
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFuncGenerator(storage))
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFuncGenerator(storage))
		}
	}

	return router
}

// Index is the index handler.
func Index(_ core.StorageClient) gin.HandlerFunc {
	return func(c *gin.Context) {
		c.String(http.StatusOK, "Hello World!")
	}
}

var routes = core.Routes{
	{
		Name:                 "Index",
		Method:               http.MethodGet,
		Pattern:              "/api/time/",
		HandlerFuncGenerator: Index,
	},

	{
		Name:                 "AddEntry",
		Method:               http.MethodPost,
		Pattern:              "/api/time/entries",
		HandlerFuncGenerator: handlers.AddEntry,
	},

	{
		Name:                 "GetAllEntries",
		Method:               http.MethodGet,
		Pattern:              "/api/time/entries",
		HandlerFuncGenerator: handlers.GetAllEntries,
	},

	{
		Name:                 "DeleteEntry",
		Method:               http.MethodDelete,
		Pattern:              "/api/time/entries/:id",
		HandlerFuncGenerator: handlers.DeleteEntry,
	},

	{
		Name:                 "GetEntry",
		Method:               http.MethodGet,
		Pattern:              "/api/time/entries/:id",
		HandlerFuncGenerator: handlers.GetEntry,
	},

	{
		Name:                 "UpdateEntry",
		Method:               http.MethodPatch,
		Pattern:              "/api/time/entries/:id",
		HandlerFuncGenerator: handlers.UpdateEntry,
	},
}
